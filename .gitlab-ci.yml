.rules-publish: &rules-publish
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^v1\.0\.0(-rc.+)?$/'
      when: always

stages:
  - test
  - build
  - doc
  - upload
  - release

cache:
  paths:
    - .gradle/wrapper
    - .gradle/caches

variables:
  TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest
  TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA
  RELEASE_JAR: url-random-all.jar
  RELEASE_ZIP: url-random-shadow.zip
  MAVEN_REPO: /cache/.m2
  GRADLE_USER_HOME: /cache/.gradle

before_script:
  - GRADLE_USER_HOME="$(pwd)/.gradle"
  - export GRADLE_USER_HOME

test:
  image: azul/zulu-openjdk:17-latest
  stage: test
  script: 
    - chmod +x ./gradlew
    - ./gradlew check
  cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
      - build
      - .gradle
      - .cache

build:
  image: azul/zulu-openjdk:17-latest
  stage: build
  script: 
    - chmod +x ./gradlew
    - ./gradlew build
  cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
      - build
      - .gradle
      - .cache

doc:
  image: azul/zulu-openjdk:17-latest
  stage: doc
  script: 
    - chmod +x ./gradlew
    - ./gradlew dokkaHtml
  cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
      - build
      - .gradle
      - .cache

upload:
  stage: upload
  image: curlimages/curl:latest
  <<: *rules-publish
  script:
    - 'curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file build/distributions/${RELEASE_ZIP} ${PACKAGE_REGISTRY_URL}/${RELEASE_ZIP}'
    - 'curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file build/libs/${RELEASE_JAR} ${PACKAGE_REGISTRY_URL}/${RELEASE_JAR}'

release_gitlab:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  <<: *rules-publish
  script:
    - echo "running release_job"
  release:                               # See https://docs.gitlab.com/ee/ci/yaml/#release for available properties
    name: '$CI_COMMIT_TAG'
    tag_name: '$CI_COMMIT_TAG'
    description: '$CI_COMMIT_TAG'
  cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
      - build
      - .gradle
      - .cache

release_docker:
  image: docker:latest
  stage: release
  <<: *rules-publish
  services:
    - docker:dind
  script:
    - docker build -t $TAG_COMMIT -t $TAG_LATEST .
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker push $TAG_COMMIT
    - docker push $TAG_LATEST

